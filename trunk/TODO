Major Feature:
1. Add EIP Tracing: Display which kernel module is invoking malicious operation.

2. Add Symbol Parsing: Convert the address[0X????????] to specific symbols such as NtOpenFile.
[Note] When i parse PE Files in the VMM, it sometimes causes the machine to freeze. I don't know why, maybe due to the page fault in VMM Mode.

3. Fix the protection area algorithm. Now it can work, but the area which is mapped(not the original one) would not be deleted after it is unmapped.

Minor Feature:
1. Own serial port receiver instead of GTKTerm. implement codes to supply the color display.

Future Feature:
1. DKOM Tracing.
[Note] 2009.10.26 I got an idea about how to do it. As DKOM modify kernel objects, if we can trace every kernel object then DKOM would not be a problem. Lucky we can do this by monitor calls to ObCreateObject(which is exported by ntoskrnl so we can get the address of this function). Now the problem left is how to intercept the call, as it is a call not a write, it would not trigger the page fault. A straightforward approach is to HOOK this function, but it would be vulnerable as malcodes can detect the hook. I'll think of a better way to do this.

2. Automatic analyze. Need to modify the code about the boot progress.